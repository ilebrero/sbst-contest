* EvoSuite 1.1.1-SNAPSHOT
* Going to generate test cases for class: com.google.common.math.LongMath
* Starting Client-0
* Connecting to master process on port 15103
* Analyzing classpath: 
  - /var/benchmarks/projects/guava/guava/target/classes
  - /var/benchmarks/projects/guava/guava/target/guava-28.2-jre.jar
* Finished analyzing classpath
* Generating tests for class com.google.common.math.LongMath
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up DSE test suite generation
* Total number of test goals: 382
* Using seed 1613118916616
* Starting DSE
* Using DSE algorithm: GENERATIONAL_SEARCH
* With timeout: 35
* With target coverage: 100
* Symbolic arrays support enabled: true
* Symbolic arrays implementation selected: LAZY_VARIABLES
* Generating tests for entry method: isPowerOfTwo
* DSE test generation finished. Generated 2 test for method isPowerOfTwo.
* Generating tests for entry method: isPrime
* DSE test generation finished. Generated 9 test for method isPrime.
* Generating tests for entry method: log10
* DSE test generation finished. Generated 1 test for method log10.
* Generating tests for entry method: log2
* DSE test generation finished. Generated 1 test for method log2.
* Generating tests for entry method: mod
* DSE test generation finished. Generated 2 test for method mod.
* Generating tests for entry method: binomial
* DSE test generation finished. Generated 4 test for method binomial.
* Generating tests for entry method: ceilingPowerOfTwo
* DSE test generation finished. Generated 1 test for method ceilingPowerOfTwo.
* Generating tests for entry method: checkedAdd
* DSE test generation finished. Generated 1 test for method checkedAdd.
* Generating tests for entry method: checkedMultiply
* DSE test generation finished. Generated 1 test for method checkedMultiply.
* Generating tests for entry method: checkedPow
* DSE test generation finished. Generated 5 test for method checkedPow.
* Generating tests for entry method: checkedSubtract
* DSE test generation finished. Generated 1 test for method checkedSubtract.
* Generating tests for entry method: divide
* DSE test generation finished. Generated 1 test for method divide.
* Generating tests for entry method: factorial
* DSE test generation finished. Generated 2 test for method factorial.
* Generating tests for entry method: floorPowerOfTwo
* DSE test generation finished. Generated 1 test for method floorPowerOfTwo.
* Generating tests for entry method: gcd
* DSE test generation finished. Generated 2 test for method gcd.
* Generating tests for entry method: mean
* DSE test generation finished. Generated 1 test for method mean.
* Generating tests for entry method: mod
* DSE test generation finished. Generated 1 test for method mod.
* Generating tests for entry method: pow
* DSE test generation finished. Generated 4 test for method pow.
* Generating tests for entry method: saturatedAdd
* DSE test generation finished. Generated 1 test for method saturatedAdd.
* Generating tests for entry method: saturatedMultiply
* DSE test generation finished. Generated 1 test for method saturatedMultiply.
* Generating tests for entry method: saturatedPow
* DSE test generation finished. Generated 1 test for method saturatedPow.
* Generating tests for entry method: saturatedSubtract
* DSE test generation finished. Generated 1 test for method saturatedSubtract.
* Generating tests for entry method: sqrt
* DSE test generation finished. Generated 1 test for method sqrt.
* Generating tests for entry method: fitsInInt
* DSE test generation finished. Generated 1 test for method fitsInInt.
* Generating tests for entry method: lessThanBranchFree
* DSE test generation finished. Generated 1 test for method lessThanBranchFree.
* Generating tests for entry method: log10Floor
* DSE test generation finished. Generated 1 test for method log10Floor.
* Generating tests for entry method: multiplyFraction
* DSE test generation finished. Generated 6 test for method multiplyFraction.
* Search finished after 17s, fitness: 288.8333333333333 and coverage: 0.24607329842931938
* Minimizing test suite
* Generated 38 tests with total length 91
* Resulting test suite's coverage: 25%
* Generating assertions
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'LongMath_ESTest' to temp/testcases
* Done!

* Computation finished
