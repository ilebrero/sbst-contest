/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 12 08:35:39 GMT 2021
 */

package com.google.common.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.math.LongMath;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongMath_ESTest extends LongMath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 13L;
      boolean boolean0 = LongMath.isPrime(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 4L;
      boolean boolean0 = LongMath.isPrime(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 7L;
      boolean boolean0 = LongMath.isPrime(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 5L;
      boolean boolean0 = LongMath.isPrime(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 3L;
      boolean boolean0 = LongMath.isPrime(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 2L;
      boolean boolean0 = LongMath.isPrime(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 0L;
      boolean boolean0 = LongMath.isPrime(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 11L;
      boolean boolean0 = LongMath.isPrime(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      long long0 = LongMath.binomial(int0, int0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      // Undeclared exception!
      try { 
        LongMath.binomial(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k (1) > n (0)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      long long0 = LongMath.factorial(int0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 21;
      long long0 = LongMath.factorial(int0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = 0L;
      int int0 = 0;
      long long1 = LongMath.saturatedPow(long0, int0);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 0L;
      long long1 = LongMath.saturatedMultiply(long0, long0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 0L;
      long long1 = LongMath.saturatedSubtract(long0, long0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = 0L;
      long long1 = LongMath.saturatedAdd(long0, long0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 0L;
      int int0 = 1;
      long long1 = LongMath.checkedPow(long0, int0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 1L;
      int int0 = 0;
      long long1 = LongMath.checkedPow(long0, int0);
      assertTrue(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 3L;
      int int0 = 0;
      long long1 = LongMath.checkedPow(long0, int0);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 0L;
      int int0 = 0;
      long long1 = LongMath.checkedPow(long0, int0);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = (-3L);
      int int0 = 0;
      long long1 = LongMath.checkedPow(long0, int0);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 0L;
      long long1 = LongMath.checkedMultiply(long0, long0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = 0L;
      long long1 = LongMath.checkedSubtract(long0, long0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = 0L;
      long long1 = LongMath.checkedAdd(long0, long0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 1L;
      long long1 = 0L;
      long long2 = LongMath.gcd(long0, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1L, long2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = 0L;
      long long1 = LongMath.gcd(long0, long0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = 1L;
      long long1 = LongMath.gcd(long0, long0);
      assertTrue(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = 0L;
      int int0 = 1;
      int int1 = LongMath.mod(long0, int0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = 0L;
      RoundingMode roundingMode0 = null;
      // Undeclared exception!
      try { 
        LongMath.sqrt(long0, roundingMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = 1L;
      int int0 = 0;
      long long1 = LongMath.pow(long0, int0);
      assertTrue(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 3L;
      int int0 = 0;
      long long1 = LongMath.pow(long0, int0);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = 0L;
      int int0 = 0;
      long long1 = LongMath.pow(long0, int0);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = (-3L);
      int int0 = 0;
      long long1 = LongMath.pow(long0, int0);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = 1L;
      boolean boolean0 = LongMath.isPowerOfTwo(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = 0L;
      boolean boolean0 = LongMath.isPowerOfTwo(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = 0L;
      long long1 = LongMath.mean(long0, long0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = 0L;
      int int0 = 0;
      // Undeclared exception!
      try { 
        LongMath.mod(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Modulus must be positive
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = 0L;
      // Undeclared exception!
      try { 
        LongMath.floorPowerOfTwo(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (0) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }
}
